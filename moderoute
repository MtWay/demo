
const getAll = function (level, dir) {
    let path = require('path');
    let fs = require('fs');
    var filesNameArr = []
    let cur = 0
    let arr = [];
    let str1 = ''
    let str2 = 'export  const routes = {\n'
    // 用个hash队列保存每个目录的深度
    var mapDeep = {}
    mapDeep[dir] = 0
    // 先遍历一遍给其建立深度索引
    function getMap(dir, curIndex) {
        var files = fs.readdirSync(dir) //同步拿到文件目录下的所有文件名
        files.map(function (file) {
            //var subPath = path.resolve(dir, file) //拼接为绝对路径
            var subPath = path.join(dir, file) //拼接为相对路径
            var stats = fs.statSync(subPath) //拿到文件信息对象
            // 必须过滤掉node_modules文件夹
            if (file != 'node_modules') {
                mapDeep[file] = curIndex + 1
                if (stats.isDirectory()) { //判断是否为文件夹类型
                    return getMap(subPath, mapDeep[file]) //递归读取文件夹
                }
            }
        })
    }
    getMap(dir, mapDeep[dir])

    function readdirs(dir, folderName, myroot) {
        var result = { //构造文件夹数据
            path: dir,
            title: path.basename(dir),
            type: 'directory',
            deep: mapDeep[folderName]
        }
        var files = fs.readdirSync(dir) //同步拿到文件目录下的所有文件名
        result.children = files.map(function (file) {
            console.log(dir, file)
            if (file.split('.')[1] == 'vue') {
                let t = file.split('.')[0];
                let path = `${dir}/${file}`;
                path = path.replace(/\\/g, "/")
                if (t == 'index') {
                    t = path.split("/")[path.split("/").length - 2];
                }
                str1 = str1 + `import ${t} from '${path}'\n`;
                path = path.replace("index.vue", '')
                path = path.replace(".vue", '')
                path = path.replace('../pages', '')
                str2 = str2 + `'${path}':${t},\n`
            }
            //var subPath = path.resolve(dir, file) //拼接为绝对路径
            var subPath = path.join(dir, file) //拼接为相对路径
            var stats = fs.statSync(subPath) //拿到文件信息对象
            if (stats.isDirectory()) { //判断是否为文件夹类型
                return readdirs(subPath, file, file) //递归读取文件夹
            }
            arr.push({
                dir,
                file
            })
            return { //构造文件数据
                path: subPath,
                name: file,
                type: 'file'
            }
        })

        return result //返回数据
    }
    filesNameArr.push(readdirs(dir, dir))
    str2 += '}';

    fs.writeFile('b.js', str1 + str2, (err) => {
        if (err) {
            console.error(err)
            return
        }
        //file written successfully
    })
    return filesNameArr
}
let list = getAll(1, '../pages')
console.log(JSON.stringify(list))
